{
   "app_list": {
      "app_launch_count": 0,
      "last_app_launch_ping": "13072752000000000",
      "last_launch_ping": "13072752000000000",
      "launch_count": 0
   },
   "browser": {
      "enabled_labs_experiments": [  ],
      "last_redirect_origin": ""
   },
   "geolocation": {
      "access_token": {

      }
   },
   "gl_renderer_string": "Gallium 0.4 on NVCE",
   "gl_vendor_string": "nouveau",
   "gl_version_string": "3.0 Mesa 10.1.0",
   "hardware_acceleration_mode_previous": true,
   "local_state": {
      "multiple_profile_prefs_version": 7
   },
   "network_time": {
      "network_time_mapping": {
         "local": 1428377873106.417,
         "network": 1428377873069.722
      }
   },
   "ntp": {
      "promo_resource_cache_update": "1428373980.713151"
   },
   "policy": {
      "last_statistics_update": "13072773731968390"
   },
   "profile": {
      "info_cache": {
         "Default": {
            "active_time": 1428379678.121796,
            "avatar_icon": "chrome://theme/IDR_PROFILE_AVATAR_0",
            "background_apps": false,
            "gaia_given_name": "Josiah",
            "gaia_name": "Josiah B",
            "gaia_picture_file_name": "Google Profile Picture.png",
            "is_ephemeral": false,
            "is_omitted_from_profile_list": false,
            "is_using_default_avatar": true,
            "is_using_default_name": true,
            "managed_user_id": "",
            "name": "Person 1",
            "user_name": "praenato14@gmail.com"
         }
      },
      "last_active_profiles": [ "Default" ],
      "last_used": "Default"
   },
   "protocol_handler": {
      "excluded_schemes": {
         "afp": true,
         "data": true,
         "disk": true,
         "disks": true,
         "file": true,
         "hcp": true,
         "javascript": true,
         "mailto": false,
         "ms-help": true,
         "news": false,
         "nntp": true,
         "shell": true,
         "snews": false,
         "vbscript": true,
         "view-source": true,
         "vnd": {
            "ms": {
               "radio": true
            }
         }
      }
   },
   "rappor": {
      "cohort_seed": 500,
      "secret": "SlmcQgqPiuVJe6iw8VJTFWyuNfrYnI4b7mOy1vT42R3IbCzwboC9IHDAwK7LWs4i"
   },
   "show-first-run-bubble-option": 0,
   "shutdown": {
      "num_processes": 0,
      "num_processes_slow": 0,
      "type": 0
   },
   "task_manager": {
      "window_placement": {
         "bottom": 1076,
         "left": 0,
         "maximized": false,
         "right": 1916,
         "top": 14,
         "work_area_bottom": 1080,
         "work_area_left": 0,
         "work_area_right": 1920,
         "work_area_top": 0
      }
   },
   "uninstall_metrics": {
      "installation_date2": "1405642347",
      "launch_count": "123"
   },
   "user_experience_metrics": {
      "low_entropy_source2": 7931,
      "session_id": 122,
      "stability": {
         "breakpad_registration_fail": 123,
         "child_process_crash_count": 0,
         "crash_count": 9,
         "debugger_not_present": 123,
         "execution_phase": 700,
         "exited_cleanly": true,
         "extension_renderer_crash_count": 0,
         "incomplete_session_end_count": 0,
         "last_timestamp_sec": "1428380353",
         "launch_count": 14,
         "launch_time_sec": "1428300131",
         "page_load_count": 0,
         "plugin_stats2": [ {
            "crashes": 1,
            "instances": 0,
            "launches": 46,
            "loading_errors": 0,
            "name": "Shockwave Flash"
         } ],
         "renderer_crash_count": 0,
         "renderer_hang_count": 0,
         "session_end_completed": false,
         "stats_buildtime": "1425078445",
         "stats_version": "41.0.2272.76-64"
      }
   },
   "variations_last_fetch_time": "13072851473109679",
   "variations_seed": "",
   "variations_seed_date": "13072851473000000",
   "variations_seed_signature": "MEYCIQC3c7wpxC6/IV+BjAGbjjSH1QRLqStOQMAjMjweFM8iwgIhAP6R7NFn7kw9RhXSfmg8m0taGSu6SqSg5Gvrg1xD+UYz",
   "was": {
      "restarted": false
   }
}
